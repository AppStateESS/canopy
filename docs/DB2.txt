DB2 by Matt McNaney

Introduction
------------
The DB2 class assists developers in the construction of database queries. It is 
an advancement of the PHPWS_DB class. DB2 works very differently than PHPWS_DB.

Differences from PHPWS_DB
-------------------------
DB2 is more object oriented than PHPWS_DB. Many queries are created by
several different DB2 classes working in tandem. It may be a little
more complicated but in the end I believe it to be more orderly and
much more flexible.

One major difference is the use of error exceptions. PHPWS_DB returned
Pear Error objects (sometimes) when an error occurred. DB2 throws
exceptions instead. To detect these exceptions, you will need to use
the try/catch calls:

try {
   perform_some_function();
} catch (PEAR_Exception $e) {
   echo $e->getMessage();
}

If you do not catch the error, it will be passed up until
caught. Uncaught exceptions stop further program execution.
Note: eventually PHPWS_DB may be rewritten using DB2. If so,
PEAR_Errors will STILL BE RETURNED instead of exceptions.

Installation
---------------
DB2 uses Pear's MDB2 class. MDB2 is regularly maintained - unlike Pear's DB
class which PHPWS_DB is reliant on. Make sure MDB2 has been installed.

Getting Started
---------------
MDB2 is not the default database class in phpWebSite (yet). As such,
you will need to require the class where needed.

require_once PHPWS_SOURCE_DIR . 'core/class/DB2.php';
-or-
PHPWS_Core::initCoreClass('DB2.php');


Creating a DB2 object
---------------------
The foundation of your query is a DB2 object.

Method:
DB2::__construct($dsn=null, $tbl_prefix=null);

Parameters:
$dsn  :  DSN string to connect to a database. Example:
         http://pear.php.net/manual/en/package.database.mdb2.intro-dsn.php

$tbl_prefix : Prefix added to tables. Used to allow multiple
              installations in a single database.

If left empty, the default dsn and/or tbl_prefix from your config file
will be used.

Example:
$db2 = new DB2;

Creating a table
-----------------
There are two types of resources: tables and subselects. We'll put
aside subselects for now and concentrate on tables.

You need to add the tables you are accessing to the DB2 object using
the addTable function

Method
DB2::addTable($table, $alias=null, $show_all_fields=true);

Parameters
$table           : Name of table added to the DB2 object's table stack.
$alias           : Alias to be used in the query in place of the table
                   name. 
$show_all_fields : If true, use table.* in a select query. False,
                   ignore table in result 

Returns
DB2_Table object reference

(Note: 'alias' refers to any representive string used in a database
query. Those familiar with databases would recognize it as 'as')


The addTable function returns a reference to the object in the table
stack.

Example:
$db2 = new DB2;
$foo = $db2->addTable('foo', 't1');
echo $db2->selectQuery();

Output: SELECT t1.* FROM foo AS t1

Setting the third parameter would cause the query to fail because if a
splat (*) is suppressed, then fields need to be included instead.


Adding fields
--------------
If you want to retrieve specific fields, you add them to the resource object
containing them. We will continue using tables in our example.

Method
DB2_Resource::addField($column_name, $alias=null, $show_in_select=true)

Parameters
$column_name    : If not a DB2_Field object, then the name of the column in the table
$alias          : An alias to be used within the query for this field.
$show_in_select : If true, show in a select query. False, otherwise.

Returns
DB2_Field object.

Example:
$db2 = new DB2;
$foo = $db2->addTable('foo', 't1');
$foo_id = $foo->addField('id');
echo $db2->selectQuery();

Output:
SELECT t1.id FROM foo AS t1 


Adding conditionals
-------------------
Conditionals limit a query's result set. There are two types of
conditionals: where and having.

Method
DB2_Resource::addWhere($column, $value, $operator=null, $conjunction='AND')

Parameters
$column        : If not a DB2_Conditional object, then the name of
                 table column to compare.
$value         : The value to compare against. This parameter could be
                 a string, an object, an array, integer, or NULL.
$operator      : The method of comparison. Defaults to equal (=).
$conjunction   : How this where object will be compared against the
                 conditional preceding it. Will be 'and' or 'or'.

Returns
DB2_Conditional object.

Example:
$db2 = new DB2;
$foo = $db2->addTable('foo');
// The above would be used to start each example below.

$foo->addWhere('id', 1, '>');

echo $db2->selectQuery();

Output: SELECT foo.* FROM foo WHERE foo.id = 1

$foo->addWhere('id', array(1,10), 'between');
echo $db2->selectQuery();

SELECT foo.* FROM foo WHERE foo.id BETWEEN (1 AND 10) 

The value of the conditional can also be another DB2 object.

Example:
$db2 = new DB2;
$foo = $db2->addTable('foo');
// The above would be used to start each example below.

$dbx = new DB2;
$bar = $dbx->addTable('bar');
$bar->addField('foo_id');
$bar->addWhere('foo_id', null, 'is not');

$foo->addWhere('id', $dbx);
echo $db2->selectQuery();

Output
SELECT foo.* 
FROM   foo 
WHERE  foo.id = (SELECT bar.foo_id FROM bar WHERE bar.foo_id IS NOT NULL) 


Grouping Where Conditionals
---------------------------
To force an order outside left-to-right in with your where
conditionals, you may wish to group them.

Method
DB2::groupWhere()

Parameters
Any number of DB2_Conditional or DB2_Conditional_Group objects.

Returns
A DB2_Conditional_Group object.

Example:
We are going to check by two first names and then one last name in
this query.

$db2 = new DB2;
$foo = $db2->addTable('foo');

$w1 = $foo->addWhere('first_name', 'Fred');
$w2 = $foo->addWhere('first_name', 'George');
$w3 = $foo->addWhere('last_name', 'Smith%', 'LIKE');

$group = $db2->groupWhere($w1, $w2);
// remember, add as many where or where group objects as you
// need

$group->setConjunction('or');
// because the parameters of groupWhere are dynamic, we set the
// group where conjunction afterwards

echo $db2->selectQuery();

Output:
SELECT foo.* 
FROM   foo 
WHERE  foo.last_name LIKE 'Smith%' 
       OR
       (foo.first_name = 'Fred' 
        AND 
        foo.first_name = 'George')


You can also put where groups in other where groups. Take the same
query above but before the selectQuery:

$db2 = new DB2;
-- snip from above --
$group->setConjunction('or');

// I don't need the group or where object so I don't catch
// the result on the two below
$db2->groupWhere($group, $w3);
$foo->addWhere('age', 30, '>');

echo $db2->selectQuery();

Output:
SELECT foo.* 
FROM   foo 
WHERE foo.age > 30 
      AND 
      (
        (
          foo.first_name = 'Fred' 
          AND 
          foo.first_name = 'George'
        ) 
        AND 
        foo.last_name LIKE 'Smith%'
      )

Embed groups as much as you need. Be aware that where conditionals not
grouped are ALWAYS called first in the query.
